import { Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { TelegramWebhookPayload, SurveyType } from "bizass-shared";
import { AuthService } from "../auth/auth.service";
import { SurveyService } from "../survey/survey.service";
import { PaymentService } from "../payment/payment.service";

interface InlineKeyboardMarkup {
  inline_keyboard: Array<
    Array<{
      text: string;
      callback_data?: string;
      web_app?: { url: string };
      pay?: boolean;
    }>
  >;
}

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly botToken: string;
  private readonly webAppUrl: string;

  constructor(
    private configService: ConfigService,
    private authService: AuthService,
    private surveyService: SurveyService,
    private paymentService: PaymentService,
  ) {
    this.botToken = this.configService.get<string>("TELEGRAM_BOT_TOKEN");
    this.webAppUrl = this.configService.get<string>(
      "FRONTEND_URL",
      "http://localhost:3000",
    );
  }

  private getMainKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [{ text: "üöÄ –ù–∞—á–∞—Ç—å –ß–ï–ö –ê–ü", callback_data: "start_checkup" }],
        [{ text: "üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data: "my_results" }],
        [{ text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data: "referral" }],
        [{ text: "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data: "about" }],
        [{ text: "‚ùì –ü–æ–º–æ—â—å", callback_data: "help" }],
      ],
    };
  }

  private getSurveyTypeKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          {
            text: "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –≤–µ—Ä—Å–∏—è (15 –º–∏–Ω)",
            web_app: { url: `${this.webAppUrl}/express` },
          },
        ],
        [
          {
            text: "üìà –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (20 –º–∏–Ω)",
            web_app: { url: `${this.webAppUrl}/full` },
          },
        ],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
      ],
    };
  }

  async handleWebhook(payload: TelegramWebhookPayload): Promise<void> {
    try {
      if (payload.message) {
        await this.handleMessage(payload.message);
      } else if (payload.callback_query) {
        await this.handleCallbackQuery(payload.callback_query);
      }
    } catch (error) {
      this.logger.error("Error handling webhook:", error);
      throw error;
    }
  }

  private async handleMessage(message: any): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text;
    const user = message.from;

    this.logger.log(`Received message from ${user.id}: ${text}`);

    if (text?.startsWith("/start")) {
      await this.handleStartCommand(chatId, user);
    } else if (text?.startsWith("/help")) {
      await this.handleHelpCommand(chatId);
    } else if (text?.startsWith("/reports")) {
      await this.handleReportsCommand(chatId, user.id);
    } else if (text?.startsWith("/referral")) {
      await this.handleReferralCommand(chatId, user.id);
    } else {
      await this.sendMessage(
        chatId,
        "I don't understand that command. Use /help to see available commands.",
      );
    }
  }

  private async handleCallbackQuery(callbackQuery: any): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const user = callbackQuery.from;

    this.logger.log(`Received callback query from ${user.id}: ${data}`);

    if (data === "start_checkup") {
      await this.handleStartCheckup(chatId);
    } else if (data === "my_results") {
      await this.handleReportsCommand(chatId, user.id);
    } else if (data === "referral") {
      await this.handleReferralCommand(chatId, user.id);
    } else if (data === "about") {
      await this.handleAboutCommand(chatId);
    } else if (data === "help") {
      await this.handleHelpCommand(chatId);
    } else if (data === "back_to_main") {
      await this.handleStartCommand(chatId, user);
    } else if (data.startsWith("survey_")) {
      const surveyType = data.split("_")[1] as SurveyType;
      await this.handleSurveySelection(chatId, user.id, surveyType);
    } else if (data.startsWith("report_free_")) {
      const sessionId = data.split("_")[2];
      await this.handleFreeReportRequest(chatId, user.id, sessionId);
    } else if (data.startsWith("report_paid_")) {
      const sessionId = data.split("_")[2];
      await this.handlePaidReportRequest(chatId, user.id, sessionId);
    } else if (data.startsWith("payment_")) {
      const sessionId = data.split("_")[1];
      await this.handlePaymentRequest(chatId, user.id, sessionId);
    } else if (data.startsWith("report_")) {
      const reportId = data.split("_")[1];
      await this.handleReportRequest(chatId, user.id, reportId);
    }

    // Answer the callback query to remove loading state
    await this.answerCallbackQuery(callbackQuery.id);
  }

  private async handleStartCommand(chatId: number, user: any): Promise<void> {
    const welcomeMessage = `
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–ï–ö –ê–ü –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å, ${user.first_name || "Friend"}!
  
–≠—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ–º–æ–≥–∞—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.

‚úÖ –í—Å–µ–≥–æ 15-20 –º–∏–Ω—É—Ç –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    `;

    await this.sendMessageWithKeyboard(
      chatId,
      welcomeMessage,
      this.getMainKeyboard(),
    );
  }

  private async handleStartCheckup(chatId: number): Promise<void> {
    const message = `
üöÄ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ß–ï–ö –ê–ü–∞*

*‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –≤–µ—Ä—Å–∏—è (15 –º–∏–Ω)*
‚Ä¢ 25 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ñ–µ—Ä –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

*üìà –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (20 –º–∏–Ω)*
‚Ä¢ 61 –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:
    `;

    await this.sendMessageWithKeyboard(
      chatId,
      message,
      this.getSurveyTypeKeyboard(),
    );
  }

  private async handleAboutCommand(chatId: number): Promise<void> {
    const aboutMessage = `
‚ÑπÔ∏è *–û –ø—Ä–æ–µ–∫—Ç–µ –ß–ï–ö –ê–ü –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å*

–≠—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ–º–æ–≥–∞—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.

*üéØ –ù–∞—à–∞ –º–∏—Å—Å–∏—è:*
–ü–æ–º–æ—á—å —ç–∫—Å–ø–µ—Ä—Ç–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å

*‚ú® –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:*
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

*üìä –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:*
–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –∏ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏

*üë• –î–ª—è –∫–æ–≥–æ:*
–ü—Å–∏—Ö–æ–ª–æ–≥–∏, –∫–æ—É—á–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã, —Ç—Ä–µ–Ω–µ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥–∞—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π

–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ? –ù–∞–∂–º–∏—Ç–µ "üöÄ –ù–∞—á–∞—Ç—å –ß–ï–ö –ê–ü"!
    `;

    await this.sendMessage(chatId, aboutMessage);
  }

  private async handleHelpCommand(chatId: number): Promise<void> {
    const helpMessage = `
*Business Assessment Platform - Help*

*Available Commands:*
/start - Start a new survey
/reports - View your survey history and download reports
/referral - Get your unique referral code to share with friends
/help - Show this help message

*Survey Types:*
‚Ä¢ *Express Survey* - Quick 25-question assessment (5-10 minutes)
‚Ä¢ *Full Survey* - Comprehensive 61-question assessment (15-20 minutes)

*How it works:*
1. Choose a survey type
2. Click the link to open the web survey
3. Answer questions one by one (auto-saved)
4. Get your free report instantly
5. Option to buy detailed analysis

Need more help? Contact support.
    `;

    await this.sendMessage(chatId, helpMessage);
  }

  private async handleReportsCommand(
    chatId: number,
    userId: number,
  ): Promise<void> {
    try {
      // Get user's survey sessions and reports
      const sessions = await this.surveyService.getUserSessions(userId);

      if (sessions.length === 0) {
        await this.sendMessage(
          chatId,
          "üìä You haven't completed any surveys yet. Use /start to begin your first assessment!",
        );
        return;
      }

      let message = "üìä *Your Survey Reports:*\n\n";

      for (const session of sessions) {
        const status =
          session.status === "COMPLETED" ? "‚úÖ Completed" : "‚è≥ In Progress";
        const surveyType =
          session.survey?.type === "EXPRESS" ? "‚ö° Express" : "üìà Full";
        const date = new Date(session.created_at).toLocaleDateString();

        message += `${surveyType} - ${status}\n`;
        message += `üìÖ ${date}\n`;

        if (session.status === "COMPLETED") {
          // Add download buttons for completed surveys
          const keyboard = {
            inline_keyboard: [
              [
                {
                  text: "üìÑ Download Free Report",
                  callback_data: `report_free_${session.id}`,
                },
              ],
              [
                {
                  text: "üíé Buy Full Report",
                  callback_data: `report_paid_${session.id}`,
                },
              ],
            ],
          };

          await this.sendMessageWithKeyboard(chatId, message, keyboard);
          message = ""; // Reset for next session
        } else {
          message += `üîó [Continue Survey](${this.webAppUrl}/survey?session=${session.id})\n\n`;
        }
      }

      if (message.trim()) {
        await this.sendMessage(chatId, message);
      }
    } catch (error) {
      this.logger.error("Error fetching reports:", error);
      await this.sendMessage(
        chatId,
        "Sorry, there was an error fetching your reports. Please try again later.",
      );
    }
  }

  private async handleReferralCommand(
    chatId: number,
    userId: number,
  ): Promise<void> {
    // TODO: Implement referral code generation
    const referralCode = `REF${userId}`;
    const referralMessage = `
üéÅ *Your Referral Code: ${referralCode}*

Share this code with friends to earn rewards!

*How it works:*
‚Ä¢ Share your code with friends
‚Ä¢ When they complete their first survey, you both get benefits
‚Ä¢ Track your referrals in your reports

*Your referral link:*
https://t.me/your_bot?start=ref_${referralCode}
    `;

    await this.sendMessage(chatId, referralMessage);
  }

  private async handleSurveySelection(
    chatId: number,
    userId: number,
    surveyType: SurveyType,
  ): Promise<void> {
    try {
      // Generate authentication token
      const authToken = this.authService.generateAuthToken(userId);

      // Create survey link with the specific survey type path
      const surveyPath = surveyType === SurveyType.EXPRESS ? "express" : "full";
      const surveyUrl = `${this.webAppUrl}/${surveyPath}?token=${authToken.token}`;

      const message = `
üéØ *${surveyType === SurveyType.EXPRESS ? "Express" : "Full"} Survey Selected*

Click the link below to start your business assessment:

[üöÄ Start Survey](${surveyUrl})

*What to expect:*
‚Ä¢ ${surveyType === SurveyType.EXPRESS ? "25 questions" : "61 questions"} across key business areas  
‚Ä¢ Auto-save progress (you can pause and resume)
‚Ä¢ Instant free report upon completion
‚Ä¢ Option to purchase detailed analysis

*Note:* This link is valid for 60 seconds for security.
      `;

      await this.sendMessage(chatId, message);
    } catch (error) {
      this.logger.error("Error generating survey link:", error);
      await this.sendMessage(
        chatId,
        "Sorry, there was an error generating your survey link. Please try again.",
      );
    }
  }

  private async handleFreeReportRequest(
    chatId: number,
    userId: number,
    sessionId: string,
  ): Promise<void> {
    try {
      // Generate free report
      const report = await this.surveyService.generateReport(sessionId, false);

      const message = `
üìÑ *Free Report Generated!*

Your business assessment report is ready for download.

*Report includes:*
‚Ä¢ Overall business score
‚Ä¢ Category performance summary
‚Ä¢ Key recommendations
‚Ä¢ Basic insights

[üì• Download Free Report](${this.webAppUrl}/reports/download/${report.id})

*Want more details?* Use the "Buy Full Report" button for comprehensive analysis with subcategory breakdowns and detailed action plans.
      `;

      await this.sendMessage(chatId, message);
    } catch (error) {
      this.logger.error("Error generating free report:", error);
      await this.sendMessage(
        chatId,
        "Sorry, there was an error generating your report. Please try again later.",
      );
    }
  }

  private async handlePaidReportRequest(
    chatId: number,
    userId: number,
    sessionId: string,
  ): Promise<void> {
    try {
      // Check if user already has a paid report for this session
      const existingReport = await this.surveyService.getPaidReport(sessionId);

      if (existingReport) {
        const message = `
üíé *Full Report Available!*

You already have a full report for this survey.

[üì• Download Full Report](${this.webAppUrl}/reports/download/${existingReport.id})
        `;
        await this.sendMessage(chatId, message);
        return;
      }

      // Initiate payment flow
      const message = `
üíé *Upgrade to Full Report*

Get comprehensive insights with:
‚Ä¢ Detailed subcategory analysis
‚Ä¢ Advanced recommendations
‚Ä¢ Action plans for improvement
‚Ä¢ Priority areas to focus on

*Price: $9.99*

Click the button below to purchase:
      `;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "üí≥ Buy Full Report - $9.99",
              callback_data: `payment_${sessionId}`,
            },
          ],
        ],
      };

      await this.sendMessageWithKeyboard(chatId, message, keyboard);
    } catch (error) {
      this.logger.error("Error handling paid report request:", error);
      await this.sendMessage(
        chatId,
        "Sorry, there was an error processing your request. Please try again later.",
      );
    }
  }

  private async handlePaymentRequest(
    chatId: number,
    userId: number,
    sessionId: string,
  ): Promise<void> {
    try {
      // Create payment invoice
      const paymentData = await this.paymentService.createPayment(
        userId,
        sessionId,
      );

      const message = `
üí≥ *Payment Invoice Created*

Your payment invoice has been generated. Please complete the payment to receive your full report.

*What you'll get:*
‚Ä¢ Detailed subcategory analysis
‚Ä¢ Advanced recommendations  
‚Ä¢ Action plans for improvement
‚Ä¢ Priority areas to focus on

Click the button below to pay:
      `;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "üí≥ Pay $9.99",
              pay: true,
            },
          ],
        ],
      };

      // Send invoice message
      await this.sendInvoice(chatId, message, paymentData.invoice, keyboard);
    } catch (error) {
      this.logger.error("Error creating payment:", error);
      await this.sendMessage(
        chatId,
        "Sorry, there was an error creating your payment. Please try again later.",
      );
    }
  }

  private async handleReportRequest(
    chatId: number,
    _userId: number,
    _reportId: string,
  ): Promise<void> {
    // Legacy method for backward compatibility
    await this.sendMessage(
      chatId,
      "üìÑ Report download functionality is now available through the /reports command!",
    );
  }

  async sendMessage(chatId: number, text: string): Promise<void> {
    try {
      const response = await fetch(
        `https://api.telegram.org/bot${this.botToken}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: text,
            parse_mode: "Markdown",
          }),
        },
      );

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }
    } catch (error) {
      this.logger.error("Error sending message:", error);
      throw error;
    }
  }

  async sendMessageWithKeyboard(
    chatId: number,
    text: string,
    keyboard: any,
  ): Promise<void> {
    try {
      const response = await fetch(
        `https://api.telegram.org/bot${this.botToken}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: text,
            parse_mode: "Markdown",
            reply_markup: keyboard,
          }),
        },
      );

      if (!response.ok) {
        const errorBody = await response.text();
        this.logger.error("Telegram API error response:", errorBody);
        throw new Error(
          `Telegram API error: ${response.statusText} - ${errorBody}`,
        );
      }
    } catch (error) {
      this.logger.error("Error sending message with keyboard:", error);
      throw error;
    }
  }

  async answerCallbackQuery(callbackQueryId: string): Promise<void> {
    try {
      await fetch(
        `https://api.telegram.org/bot${this.botToken}/answerCallbackQuery`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            callback_query_id: callbackQueryId,
          }),
        },
      );
    } catch (error) {
      this.logger.error("Error answering callback query:", error);
    }
  }

  async sendInvoice(
    chatId: number,
    text: string,
    invoice: any,
    keyboard: any,
  ): Promise<void> {
    try {
      const response = await fetch(
        `https://api.telegram.org/bot${this.botToken}/sendInvoice`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: chatId,
            title: invoice.title,
            description: invoice.description,
            payload: invoice.payload,
            provider_token: invoice.provider_token,
            currency: invoice.currency,
            prices: invoice.prices,
            reply_markup: keyboard,
          }),
        },
      );

      if (!response.ok) {
        const errorBody = await response.text();
        this.logger.error("Telegram Invoice API error response:", errorBody);
        throw new Error(
          `Telegram Invoice API error: ${response.statusText} - ${errorBody}`,
        );
      }
    } catch (error) {
      this.logger.error("Error sending invoice:", error);
      throw error;
    }
  }

  async generateSurveyLink(
    telegramId: number,
    surveyType: SurveyType,
  ): Promise<string> {
    const authToken = this.authService.generateAuthToken(telegramId);
    return `${this.webAppUrl}/survey?token=${authToken.token}&type=${surveyType}`;
  }
}
