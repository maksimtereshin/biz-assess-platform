import { Injectable } from "@nestjs/common";
import { AnalyticsResult } from "bizass-shared";
import * as PDFDocument from "pdfkit";
import { Chart, registerables } from "chart.js";
import { createCanvas } from "canvas";

@Injectable()
export class PdfGenerator {
  constructor() {
    // Register Chart.js components
    Chart.register(...registerables);
  }
  /**
   * Generates a PDF report based on analytics data
   */
  async createPdf(
    data: AnalyticsResult,
    isPaid: boolean = false,
  ): Promise<Buffer> {
    return new Promise(async (resolve, reject) => {
      try {
        const doc = new PDFDocument({ margin: 50 });
        const buffers: Buffer[] = [];

        doc.on("data", buffers.push.bind(buffers));
        doc.on("end", () => {
          const pdfData = Buffer.concat(buffers);
          resolve(pdfData);
        });

        // Add title
        doc
          .fontSize(24)
          .text("Business Assessment Report", { align: "center" })
          .moveDown(2);

        // Add overall score
        doc
          .fontSize(18)
          .text(`Overall Business Score: ${data.overallScore}%`, {
            align: "center",
          })
          .moveDown(1);

        // Add assessment summary
        doc
          .fontSize(12)
          .text(`Assessment Summary:`, { underline: true })
          .moveDown(0.5)
          .text(`Total Questions: ${data.totalQuestions}`)
          .text(`Answered Questions: ${data.answeredQuestions}`)
          .text(
            `Completion Rate: ${Math.round((data.answeredQuestions / data.totalQuestions) * 100)}%`,
          )
          .moveDown(2);

        // Add category scores with pie chart
        doc.text("Category Performance:", { underline: true }).moveDown(0.5);

        // Generate and add pie chart
        try {
          const chartBuffer = await this.generatePieChart(data.categoryScores);
          if (chartBuffer) {
            doc.image(chartBuffer, {
              fit: [400, 300],
              align: "center",
            });
            doc.moveDown(1);
          }
        } catch (error) {
          console.warn("Failed to generate pie chart:", error);
        }

        // Add category scores as text
        Object.entries(data.categoryScores).forEach(([category, score]) => {
          const categoryName = this.formatCategoryName(category);
          doc.text(`${categoryName}: ${score}%`).moveDown(0.3);
        });

        doc.moveDown(1);

        // Add subcategory scores (only for paid reports or HR category)
        if (isPaid || this.shouldShowSubcategoryDetails(data)) {
          doc
            .text("Detailed Subcategory Analysis:", { underline: true })
            .moveDown(0.5);

          Object.entries(data.subcategoryScores).forEach(
            ([subcategory, score]) => {
              const subcategoryName = this.formatSubcategoryName(subcategory);
              doc.text(`${subcategoryName}: ${score}%`).moveDown(0.3);
            },
          );

          doc.moveDown(1);
        } else {
          // Show locked content message for free reports
          doc
            .text("Detailed Subcategory Analysis:", { underline: true })
            .moveDown(0.5)
            .text("ðŸ”’ Detailed analysis available in the full report")
            .text("Upgrade to see comprehensive insights for each subcategory")
            .moveDown(1);
        }

        // Add recommendations
        doc.text("Key Recommendations:", { underline: true }).moveDown(0.5);

        const recommendations = this.generateRecommendations(data);
        recommendations.forEach((rec) => {
          doc.text(`â€¢ ${rec}`).moveDown(0.3);
        });

        doc.moveDown(2);

        // Add footer
        doc
          .fontSize(10)
          .text("Generated by Business Assessment Platform", {
            align: "center",
          })
          .text(new Date().toLocaleDateString(), { align: "center" });

        if (!isPaid) {
          doc
            .moveDown(1)
            .text(
              "Upgrade to Full Report for detailed insights and action plans",
              { align: "center" },
            );
        }

        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }

  private formatCategoryName(category: string): string {
    const categoryMap: Record<string, string> = {
      product: "Product & Service",
      marketing: "Marketing & Sales",
      sales: "Sales Process",
      hr: "Human Resources",
      automation: "Automation & Technology",
      metrics: "Metrics & Analytics",
      competency: "Competency Map",
    };
    return categoryMap[category] || category;
  }

  private formatSubcategoryName(subcategory: string): string {
    const subcategoryMap: Record<string, string> = {
      "product-line": "Product Line",
      "personal-brand": "Personal Brand",
      monetization: "Monetization",
      "customer-avatar": "Customer Avatar",
      "strategy-funnels": "Strategy & Funnels",
      "promotion-channels": "Promotion Channels",
      "sales-organization": "Sales Organization",
      "sales-funnel": "Sales Funnel",
      delegation: "Delegation",
      economics: "Economics",
      automation: "Automation",
      "ai-technology": "AI Technology",
      "metrics-tracking": "Metrics Tracking",
      professional: "Professional Development",
      social: "Social Networking",
    };
    return subcategoryMap[subcategory] || subcategory;
  }

  private shouldShowSubcategoryDetails(data: AnalyticsResult): boolean {
    // Show HR subcategory details in free reports as per requirements
    return Object.keys(data.subcategoryScores).some(
      (key) => key.includes("delegation") || key.includes("economics"),
    );
  }

  private generateRecommendations(data: AnalyticsResult): string[] {
    const recommendations: string[] = [];

    // Analyze category scores and provide recommendations
    Object.entries(data.categoryScores).forEach(([category, score]) => {
      if (typeof score === "number" && score < 50) {
        switch (category) {
          case "product":
            recommendations.push(
              "Focus on defining your unique value proposition and product-market fit",
            );
            break;
          case "marketing":
            recommendations.push(
              "Develop a comprehensive marketing strategy and improve customer targeting",
            );
            break;
          case "sales":
            recommendations.push(
              "Optimize your sales process and improve conversion rates",
            );
            break;
          case "hr":
            recommendations.push(
              "Invest in team development and improve delegation processes",
            );
            break;
          case "automation":
            recommendations.push(
              "Implement automation tools to improve efficiency",
            );
            break;
          case "metrics":
            recommendations.push(
              "Establish key performance indicators and regular reporting",
            );
            break;
        }
      }
    });

    if (recommendations.length === 0) {
      recommendations.push(
        "Continue monitoring and optimizing your business processes",
      );
      recommendations.push(
        "Consider expanding into new markets or product lines",
      );
    }

    return recommendations.slice(0, 5); // Limit to 5 recommendations
  }

  /**
   * Generates a pie chart for category scores
   */
  private async generatePieChart(
    categoryScores: Record<string, number>,
  ): Promise<Buffer | null> {
    try {
      const canvas = createCanvas(400, 300);
      const ctx = canvas.getContext("2d");

      // Prepare data for the chart
      const labels = Object.keys(categoryScores).map((key) =>
        this.formatCategoryName(key),
      );
      const data = Object.values(categoryScores);
      const colors = [
        "#FF6384",
        "#36A2EB",
        "#FFCE56",
        "#4BC0C0",
        "#9966FF",
        "#FF9F40",
        "#FF6384",
        "#C9CBCF",
      ];

      // Create the chart
      const chart = new Chart(ctx as any, {
        type: "pie",
        data: {
          labels,
          datasets: [
            {
              data,
              backgroundColor: colors.slice(0, labels.length),
              borderColor: "#ffffff",
              borderWidth: 2,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: "bottom",
              labels: {
                padding: 20,
                usePointStyle: true,
              },
            },
            title: {
              display: true,
              text: "Category Performance Distribution",
              font: {
                size: 16,
                weight: "bold",
              },
            },
          },
        },
      });

      // Wait for chart to render
      await new Promise((resolve) => setTimeout(resolve, 100));

      // Convert canvas to buffer
      const buffer = canvas.toBuffer("image/png");
      chart.destroy();

      return buffer;
    } catch (error) {
      console.error("Error generating pie chart:", error);
      return null;
    }
  }

  /**
   * Generates a simple text-based report for testing purposes
   */
  generateTextReport(data: AnalyticsResult): string {
    return `
Business Assessment Report
========================

Overall Score: ${data.overallScore}%
Total Questions: ${data.totalQuestions}
Answered Questions: ${data.answeredQuestions}

Category Scores:
${Object.entries(data.categoryScores)
  .map(
    ([category, score]) => `- ${this.formatCategoryName(category)}: ${score}%`,
  )
  .join("\n")}

Subcategory Scores:
${Object.entries(data.subcategoryScores)
  .map(
    ([subcategory, score]) =>
      `- ${this.formatSubcategoryName(subcategory)}: ${score}%`,
  )
  .join("\n")}
    `.trim();
  }
}
